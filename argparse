#!/bin/bash -eu
set -o pipefail

MY_CMD=${BASH_SOURCE[0]}

function help_message()
{
	cat <<helpDOC
	
Here is where you would place statement to
    print the appropriate help message


    try the following different command-lines to see which functions are called:
	./argparse --version --my-arg --tag="Very good"
	./argparse --version --my-arg --tag="VeryGood"
	./argparse --version --my-arg --tag= "VeryGood"
	./argparse --tag= no --tag=yes option1 option2
	./argparse ?
	./argparse -?
	./argparse --unknown

	Notice which command-lines work as expected. Spaces, even in quotes, are parsed

helpDOC

}

function show_version()
{
	echo "Here would be where you would print the script version number"
}

function store_myarg()
{
	echo "The \"--my-arg option\" has been detected. In this function "
	echo "    a default parameter might be changed from false to true."
}

function store_tag()
{
	echo "The  \"--tag=<value>\" option has been detected with the"
	echo "    value \"$@\". would be assigned to a global variable."
}

function store_opt()
{
	echo "An option was detected. Here's where the"
	echo "    \"$@\" option would be interpreted and stored for use by the script."
}

function parse_command_line()
{
	while [[ $# -ne 0 ]]; do
		arg="$1"; shift

		case "$arg" in
			-\?|-h|--help)
				help_message
				exit
				;;
			--version)
				show_version
				;;
			--my-arg)
				store_myarg
				;;
			--tag=*)
				val="$(echo "$arg" | cut -f 2- -d =)"
				store_tag "$val"
				;;
			-*)
				echo >&2 "$MY_CMD: illegal option \`$arg'"
				echo >&2 "         Run '$MY_CMD --help' for more information"
				exit 1
				;;
			*)
				store_opt "$arg"
				;;
		esac
	done
}

parse_command_line $@



